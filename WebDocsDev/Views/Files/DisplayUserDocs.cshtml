@model PagedList.IPagedList<WebDocs.DomainModels.Database.FileModel>

@using PagedList.Mvc;
@using Microsoft.AspNet.Identity;
@using WebDocs.Common.Helper.Formatters;
@using WebDocs.Common.Enum.SystemLogicEnum;
@using WebDocs.Common.Helper.LinkDecision;
@using WebDocs.Common.Interfaces;

@{
    ViewBag.Title = "DisplayUserDocs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    string UserID_OfUserCurrentlyLoggedIn = User.Identity.GetUserId();
}
<br />

<div class="panel panel-primary">
    <div class="panel-heading"><h2>User Personal Documents</h2></div>
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover table-condensed">

                <thead>
                    <tr>
                        <th class="text-nowrap">
                            @Html.ActionLink("Ref#", "DisplayUserDocs", new { sortOrder = ViewBag.FileIDSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Name", "DisplayUserDocs", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Size", "DisplayUserDocs", new { sortOrder = ViewBag.FileSizeSortParm, currentFilter = ViewBag.CurrentFilter })

                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Owner", "DisplayUserDocs", new { sortOrder = ViewBag.NameOfFileOwnerSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Last Modified By", "DisplayUserDocs", new { sortOrder = ViewBag.NameOfPersonLastUpdatedBySortParm, currentFilter = ViewBag.CurrentFilter })

                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Created", "DisplayUserDocs", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Status", "DisplayUserDocs", new { sortOrder = ViewBag.CurrentFileStatusSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Shared Status", "DisplayUserDocs", new { sortOrder = ViewBag.CurrentFileShareStatusSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Version", "DisplayUserDocs", new { sortOrder = ViewBag.CurrentVersionNumberSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        @*<th class="text-nowrap">@Html.Label("Downloaded By")</th>*@
                        <th>
                            <!-- Trigger the modal with a button -->
                            <button type="button" class="btn btn-success btn-lg btn-block" data-toggle="modal" data-target="#UploadUserFileModal"><span class="glyphicon glyphicon-cloud-upload"></span> Upload File</button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="text-nowrap text-center">
                                @Html.DisplayFor(modelItem => item.FileID)
                            </td>
                            <td class="text-nowrap">
                                @Html.DisplayFor(modelItem => item.FullFileName)
                            </td>
                            <td class="text-nowrap">
                                @Html.Label(FileSize.ToFileSize(Convert.ToDouble(item.Size)))
                            </td>
                            <td class="text-nowrap">
                                @Html.DisplayFor(modelItem => item.FileOwner.UserFullName)
                            </td>
                            <td class="text-nowrap">
                                @Html.DisplayFor(modelItem => item.PersonThatLastUpdatedFile.UserFullName)
                            </td>
                            <td class="text-nowrap">
                                @Html.Label(item.Created.ToString("MMMM dd, yyyy"))
                            </td>
                            <td class="text-nowrap ">
                                @Html.DisplayFor(modelItem => item.FileViewStatuses.Status)
                            </td>
                            <td class="text-nowrap ">
                                @Html.DisplayFor(modelItem => item.FileShareStatues.Status)
                            </td>
                            <td class="text-nowrap text-center">
                                @Html.DisplayFor(modelItem => item.CurrentVersionNumber)
                            </td>
                            <td class="text-nowrap">
                                @{
                                    IDecsions Decision = LinkDecision.GetUserDocsFileLinkDecsion(item, User.Identity.GetUserId<int>());
                                }
                                <table style=" border: none;">
                                    <tr>
                                        <td>
                                            <a href="javascript:void(0);" onclick="showFileDetails(@item.FileID);" class="btn btn-info btn-sm showHistory">
                                                <span class="glyphicon glyphicon-list-alt"> History</span>
                                            </a>
                                        </td>
                                        <td>&nbsp;</td>
                                        <td>
                                            <div class="text-nowrap">
                                                @if (Decision != null)
                                                {
                                                    switch (Decision.FinalDecision)
                                                    {
                                                        case ControlTypes.Download:

                                                            <a class="btn btn-primary btn-sm btn-block" data-toggle="tooltip" data-placement="top" title="Click To Download File." href="#" onclick="showDownloadNotificationModal(@item.FileID,'@item.FullFileName', @UserID_OfUserCurrentlyLoggedIn )">
                                                                <span class="glyphicon glyphicon-cloud-download"> Download</span>
                                                            </a>
                                                            break;
                                                        case ControlTypes.UploadFileNotification:
                                                            <a href="~/" class="btn btn-warning btn-sm btn-block" data-toggle="tooltip" data-placement="top" title="Click To Download File." href="#" onclick="showDownloadNotificationModal(@item.FileID,'@item.FullFileName', @UserID_OfUserCurrentlyLoggedIn )">
                                                                <span class="glyphicon glyphicon-cloud-upload"> Notify-To-Upload</span>
                                                            </a>
                                                            @*@Html.ActionLink("Notify to Upload", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, new { @class = "btn btn-primary btn-sm btn-block" })</span>*@
                                                            break;
                                                        default:
                                                            break;

                                                    }
                                                }
                                                else
                                                {
                                                    <div class="alert alert-info">
                                                        <strong>Info!</strong> - No Links To Display!
                                                    </div>

                                                }
                                            </div>

                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr></tr>
                        @Html.Partial("_FileDetails", item);
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer panel-danger">
        <table class="panel-primary">
            <tr>
                <td>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</td>
                <td>&nbsp;</td>
                <td>
                    @Html.PagedListPager(Model, page => Url.Action("DisplayUserDocs", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                </td>
            </tr>
        </table>
    </div>
</div>


@using (Html.BeginForm("DisplayUserDocs", "Files", new { sortOrder = "", currentFilter = ViewBag.CurrentFilter, page = Model.PageNumber }, FormMethod.Get))
{
    <input type="hidden" id="sortOrder" name="sortOrder" value="@ViewBag.CurrentSort" />
    <input type="hidden" id="currentFilter" name="currentFilter" value="@ViewBag.CurrentFilter" />

    <input type="hidden" id="page" name="page" value="@Model.PageNumber" />

    <input type="submit" id="btnRefreshPage" value="" style="display:none" />
}

@section Scripts{
    <script type="text/javascript">

        //function CloseFileDetails(fileID) {
        //    var tdObj = $("#FileDetails_" + fileID);
        //    tdObj.addClass("hidden");
        //}

        //function showFileDetails(fileID) {
        //    //debugger;
        //    $(".FileDetailsClass").addClass("hidden");
        //    var tdObj = $("#FileDetails_" + fileID);
        //    tdObj.removeClass("hidden");
        //    //show loading
        //    $("#FileHistory_Loading_" + fileID).show();
        //    $('#FileHistory_Content_' + fileID).hide();
        //    loadFileHistory(fileID);
        //}

         @*function loadFileHistory(FileID) {

            var ajaxCallURL = '@Url.Action("GetFileHistory", "Files")';
             var DataObj = JSON.parse('{}');

             DataObj.FileID = FileID;

            $.ajax({
                type: "POST",
                url: ajaxCallURL,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(DataObj),
                datatype: "json",
                success: function (data) {

                    $("#FileHistory_Loading_" + FileID).fadeOut("slow", function () {
                        $('#FileHistory_Content_' + FileID).html(data).fadeIn("slow");
                    });
                },
                error: function (data) {

                    $("#FileHistory_Loading_" + FileID).fadeOut("slow", function () {
                        $('#FileHistory_Content_' + FileID).html(data).fadeIn("slow");
                    });

                }
            });

        }*@



    </script>

}






