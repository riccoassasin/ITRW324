<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data"#>  
<#@ assembly name="System.Configuration"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.SqlClient" #> 
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var map = new ExeConfigurationFileMap();
    map.ExeConfigFilename = this.Host.ResolvePath(@"..\..\App.config");

    
    //var fileManager =  EntityFrameworkTemplateFileManager.Create(this);
    //var codeGenerationTools = new CodeGenerationTools(this);

    var config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
    var connectionString = config.ConnectionStrings.ConnectionStrings["DefaultConnection"].ConnectionString;


    //Open ADO connection
    var connection = new SqlConnection(connectionString);
    var command = connection.CreateCommand();
    connection.Open();

    command.CommandText = string.Format(@"SELECT DISTINCT t.NAME FROM SYS.tables as t INNER JOIN SYS.columns AS c ON t.object_id = c.object_id and t.name like '%Lookup%';");

    var tableReader = command.ExecuteReader();
    var enumTables = new List<string>();
    while (tableReader.Read())
    {
        enumTables.Add(tableReader["NAME"].ToString());
    }
    connection.Close();
   
            #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WebDocs.Common.Enum.DbLookupTables
{

<#
 
    foreach (var tableName in enumTables)
    {
#>
        public enum <#=            tableName.Replace("LookupTable_","Enum") #> : int
	    {
<#
        connection.Open();

        command.CommandText = string.Format("SELECT * FROM {0}",tableName);
        var columnReader = command.ExecuteReader();
        
        var enumNames = new List<string>();
        //var iNext = reader.RecordsAffected;
        while (columnReader.Read()){
            if(!string.IsNullOrEmpty(columnReader[1].ToString().Trim())){
                enumNames.Add(columnReader[1].ToString().Replace(" ","_").Replace("(","").Replace(")","").Replace("/","_").Replace("-","") + " = " + columnReader[0].ToString())  ;
            }
        }
        connection.Close();

        var iCount = 1;
        foreach(string enumNamesAndValue in enumNames){
            
            if(enumNames.Count > iCount){
               #><#=                    enumNamesAndValue + ","  #><# 
            }else{
                #><#=                    enumNamesAndValue  #><#
            }
            iCount = iCount + 1;
        }
#>
        }
<#
    }

#>
}




